# Nome do fluxo de trabalho que aparecerá na aba "Actions" do seu repositório GitHub
name: Build Windows & macOS Executables

# Define quando este fluxo de trabalho será executado
on:
  # Executa quando você envia código para a branch 'main'
  push:
    branches: [ "main" ]
  # Permite que você execute este fluxo de trabalho manualmente a partir da aba Actions
  workflow_dispatch:

jobs:
  build:
    # Usa uma matriz de estratégia para executar o mesmo job em diferentes sistemas operacionais
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # Define a máquina virtual que será usada, baseada na matriz acima
    runs-on: ${{ matrix.os }}

    steps:
      # Etapa 1: Baixa o código do seu repositório para a máquina virtual
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configura o ambiente Python na máquina virtual
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Etapa 3: Instala todas as bibliotecas que o seu script precisa
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pandas selenium webdriver-manager Pillow pynput pyautogui openpyxl

      # Etapa 4: Executa o PyInstaller para criar o executável
      - name: Build executable with PyInstaller
        run: >
          pyinstaller 
          --name "NFeAutomator" 
          --onefile 
          --windowed 
          --add-data "animation.gif${{ runner.os == 'Windows' && ';' || ':' }}." 
          webPDFAUTOGif.py

      # Etapa 5: Faz o upload do executável como um "artefato" para que você possa baixá-lo
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # O nome do artefato incluirá o sistema operacional para fácil identificação
          name: NFeAutomator-${{ matrix.os }}
          # O PyInstaller coloca o executável final na pasta 'dist'
          path: dist/
